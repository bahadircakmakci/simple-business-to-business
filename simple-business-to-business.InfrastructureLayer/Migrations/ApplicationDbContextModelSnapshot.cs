// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using simple_business_to_business.InfrastructureLayer.Context;

namespace simple_business_to_business.InfrastructureLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.AppUserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "6bebdae2-56f2-429e-8f85-dd0eea28a975",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 129, DateTimeKind.Local).AddTicks(25),
                            Name = "admin",
                            NormalizedName = "ADMİN",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "0d089489-18ea-416b-ad6c-bd3d78b3dcb6",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 129, DateTimeKind.Local).AddTicks(2204),
                            Name = "plasiyer",
                            NormalizedName = "PLASİYER",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "278f4347-5b96-4f82-8547-7bac0fd1eb80",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 129, DateTimeKind.Local).AddTicks(2225),
                            Name = "member",
                            NormalizedName = "MEMBER",
                            Status = 1
                        });
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.AppUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("PlasiyerCode")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CompanyId = 1,
                            CompanyName = "DefaultCompany",
                            ConcurrencyStamp = "b5c1741f-1f58-4a6e-a172-c7c8011f80f3",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 129, DateTimeKind.Local).AddTicks(6345),
                            Email = "admin@simpleb2b.com",
                            EmailConfirmed = false,
                            FullName = "Admin Admin",
                            ImagePath = "/images/users/default.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@simpleb2b.com",
                            NormalizedUserName = "ADMİN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHKYngKlLzBmVBciypIsiimQM9I03XVWlh+WkbRI/68IPkfcd59x9NIgXone+mp8AA==",
                            PhoneNumberConfirmed = false,
                            PlasiyerCode = 0,
                            SecurityStamp = "simpleb2badmin",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<int>("BasketQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.BrandDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int?>("BrandsId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Discount1")
                        .HasColumnType("integer");

                    b.Property<int>("Discount2")
                        .HasColumnType("integer");

                    b.Property<int>("Discount3")
                        .HasColumnType("integer");

                    b.Property<int>("Discount4")
                        .HasColumnType("integer");

                    b.Property<int>("Discount5")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandsId");

                    b.ToTable("BrandDiscounts");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BrandName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandName = "Ayfar",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 147, DateTimeKind.Local).AddTicks(9684),
                            Description = "Ayfar Farları",
                            ImagePath = "/images/Brands/ayfar.jpg",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandName = "TRW",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 148, DateTimeKind.Local).AddTicks(1643),
                            Description = "TRW Balataları",
                            ImagePath = "/images/Brands/trw.jpg",
                            Status = 1
                        });
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountingCode")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<string>("Phone1")
                        .HasColumnType("text");

                    b.Property<string>("Phone2")
                        .HasColumnType("text");

                    b.Property<string>("PlasiyerCode")
                        .HasColumnType("text");

                    b.Property<decimal>("RiskLimit")
                        .HasColumnType("numeric");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaxAdress")
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalRiskLimit")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountingCode = "1111111111",
                            Address = "deneme",
                            City = "İstanbul",
                            CompanyName = "DefaultCompany",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 127, DateTimeKind.Local).AddTicks(1890),
                            RiskLimit = 0m,
                            State = "Eyüp",
                            Status = 1,
                            TotalBalance = 0m,
                            TotalRiskLimit = 0m
                        });
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.CompanyDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CompaniesId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Discount1")
                        .HasColumnType("integer");

                    b.Property<int>("Discount2")
                        .HasColumnType("integer");

                    b.Property<int>("Discount3")
                        .HasColumnType("integer");

                    b.Property<int>("Discount4")
                        .HasColumnType("integer");

                    b.Property<int>("Discount5")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompaniesId");

                    b.ToTable("CompanyDiscounts");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Currencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<char>("Symbol")
                        .HasColumnType("character(1)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 148, DateTimeKind.Local).AddTicks(3554),
                            CurrencyCode = "TL",
                            CurrencyName = "Türk Lirası",
                            Status = 1,
                            Symbol = '₺'
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 148, DateTimeKind.Local).AddTicks(6978),
                            CurrencyCode = "USD",
                            CurrencyName = "Amerikan Doları",
                            Status = 1,
                            Symbol = '$'
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 148, DateTimeKind.Local).AddTicks(7017),
                            CurrencyCode = "EUR",
                            CurrencyName = "EURO",
                            Status = 1,
                            Symbol = '€'
                        });
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.ExchangeRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("BanknoteBuying")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BanknoteSelling")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CurrenciesId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("ForexBuying")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ForexSelling")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrenciesId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.MainAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttributeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<int?>("ProductsId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("MainAttributes");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.MainCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoyName = "Aydınlatma",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 147, DateTimeKind.Local).AddTicks(267),
                            Description = "Aydınlarma ve Ekipmanları",
                            ImagePath = "/images/MainCategory/default.jpg",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoyName = "Fren Sistemi",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 147, DateTimeKind.Local).AddTicks(2805),
                            Description = "Fren Sistemi ve Ekipmanları",
                            ImagePath = "/images/SubCategory/default.jpg",
                            Status = 1
                        });
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BasketId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrdersId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("OrdersId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Orders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("AppUsersId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompaniesId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUsersId");

                    b.HasIndex("CompaniesId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.ProductPictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("SubAttributesId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SubAttributesId");

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompaniesId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CriticalQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ListPriceVat")
                        .HasColumnType("numeric");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxSellerQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Vat")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CompaniesId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.SubAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttributeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<int>("MainAttributeId")
                        .HasColumnType("integer");

                    b.Property<int?>("MainAttributesId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductsId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainAttributesId");

                    b.HasIndex("ProductsId");

                    b.ToTable("SubAttributes");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.SubCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<int?>("MainCategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoriesId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoyName = "Far",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 147, DateTimeKind.Local).AddTicks(4649),
                            Description = "Far ve Ekipmanları",
                            ImagePath = "/images/MainCategory/default.jpg",
                            MainCategoryId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoyName = "Balata",
                            CreateDate = new DateTime(2021, 5, 29, 19, 48, 25, 147, DateTimeKind.Local).AddTicks(7557),
                            Description = "Balatalar",
                            ImagePath = "/images/SubCategory/default.jpg",
                            MainCategoryId = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.AppUserManagerRoles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.HasDiscriminator().HasValue("AppUserManagerRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.AppUserRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.AppUserRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.AppUsers", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Companies", "Companies")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Basket", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.AppUsers", "AppUsers")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUsers");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.BrandDiscount", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandsId");

                    b.Navigation("Brands");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.CompanyDiscount", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Companies", "Companies")
                        .WithMany()
                        .HasForeignKey("CompaniesId");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.ExchangeRates", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrenciesId");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.MainAttributes", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Products", null)
                        .WithMany("MainAttributes")
                        .HasForeignKey("ProductsId");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.OrderDetails", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Products", "Basket")
                        .WithMany()
                        .HasForeignKey("BasketId");

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersId");

                    b.Navigation("Basket");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Orders", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.AppUsers", "AppUsers")
                        .WithMany()
                        .HasForeignKey("AppUsersId");

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Companies", "Companies")
                        .WithMany()
                        .HasForeignKey("CompaniesId");

                    b.Navigation("AppUsers");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.ProductPictures", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Products", "Products")
                        .WithOne("ProductPictures")
                        .HasForeignKey("simple_business_to_business.DomainLayer.Entities.Concrete.ProductPictures", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.SubAttributes", null)
                        .WithMany("ProductPictures")
                        .HasForeignKey("SubAttributesId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Products", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Companies", "Companies")
                        .WithMany()
                        .HasForeignKey("CompaniesId");

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Currencies", "Currencies")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.MainCategories", "MainCategories")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.SubCategories", "SubCategories")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("Companies");

                    b.Navigation("Currencies");

                    b.Navigation("MainCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.SubAttributes", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.MainAttributes", "MainAttributes")
                        .WithMany()
                        .HasForeignKey("MainAttributesId");

                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.Products", null)
                        .WithMany("SubAttributes")
                        .HasForeignKey("ProductsId");

                    b.Navigation("MainAttributes");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.SubCategories", b =>
                {
                    b.HasOne("simple_business_to_business.DomainLayer.Entities.Concrete.MainCategories", "MainCategories")
                        .WithMany()
                        .HasForeignKey("MainCategoriesId");

                    b.Navigation("MainCategories");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.Products", b =>
                {
                    b.Navigation("MainAttributes");

                    b.Navigation("ProductPictures");

                    b.Navigation("SubAttributes");
                });

            modelBuilder.Entity("simple_business_to_business.DomainLayer.Entities.Concrete.SubAttributes", b =>
                {
                    b.Navigation("ProductPictures");
                });
#pragma warning restore 612, 618
        }
    }
}
